networks:
  authelia-network:
    external: true
  traefik-network:
    external: true

volumes:
  redis-data:
  authelia-postgres:
  authelia-postgres-backup:
  authelia-database-backups:
  traefik-certificates:

services:
  postgres:
    image: ${AUTHELIA_POSTGRES_IMAGE_TAG}
    volumes:
      - authelia-postgres:/var/lib/postgresql/data
      - ./config/secrets/STORAGE_PASSWORD:/run/secrets/storage_password
    environment:
      POSTGRES_DB: ${AUTHELIA_DB_NAME}
      POSTGRES_USER: ${AUTHELIA_DB_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/storage_password
    networks:
      - authelia-network
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${AUTHELIA_DB_NAME}", "-U", "${AUTHELIA_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  redis:
    image: ${AUTHELIA_REDIS_IMAGE_TAG}
    volumes:
      - redis-data:/bitnami/redis/data
      - ./config/secrets/REDIS_PASSWORD:/run/secrets/redis_password
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    networks:
      - authelia-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  authelia:
    image: ${AUTHELIA_IMAGE_TAG}
    volumes:
      - ./config:/config
    environment:
      AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: /config/secrets/JWT_SECRET
      AUTHELIA_SESSION_SECRET_FILE: /config/secrets/SESSION_SECRET
      AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE: /config/secrets/SMTP_PASSWORD
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /config/secrets/STORAGE_ENCRYPTION_KEY
      AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE: /config/secrets/STORAGE_PASSWORD
      AUTHELIA_SESSION_REDIS_PASSWORD_FILE: /config/secrets/REDIS_PASSWORD
      TZ: ${AUTHELIA_TIMEZONE}
    networks:
      - authelia-network
      - traefik-network
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on a specific hostname
      - "traefik.http.routers.authelia.rule=Host(`${AUTHELIA_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.authelia.service=authelia"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.authelia.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.authelia.loadbalancer.server.port=9091"
      # Enable TLS on this router
      - "traefik.http.routers.authelia.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.authelia.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.authelia.loadbalancer.passhostheader=true"
      # Apply a compression middleware
      - "traefik.http.routers.authelia.middlewares=compresstraefik"
      # Define settings for the compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Integrate forward authentication using Authelia
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://${AUTHELIA_HOSTNAME}"
      # Trust the Forwarded headers from previous proxies
      - "traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true"
      # Specify headers to forward with authenticated responses
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      traefik:
        condition: service_healthy

  traefik:
    image: ${TRAEFIK_IMAGE_TAG}
    command:
      # Set the log level (DEBUG, INFO, WARN, ERROR)
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      # Enable the built-in API and web-based dashboard
      - "--api.dashboard=true"
      # Enable the /ping endpoint so we can health-check Traefik
      - "--ping=true"
      # Assign the /ping endpoint to a dedicated entry point on port 8082
      - "--ping.entrypoint=ping"
      - "--entrypoints.ping.address=:8082"
      # Define the primary HTTP entry point on port 80
      - "--entrypoints.web.address=:80"
      # Define the secure (HTTPS) entry point on port 443
      - "--entrypoints.websecure.address=:443"
      # HTTP -> HTTPS redirect at entrypoint level
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Enable the Docker provider to detect containers and their labels
      - "--providers.docker=true"
      # Point Traefik to the Docker socket
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Prevent automatic exposure of all containers; only expose containers
      # with "traefik.enable=true"
      - "--providers.docker.exposedbydefault=false"
      # Use ACME (Let's Encrypt) to generate/renew certificates via TLS challenge
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # The email address used by Let's Encrypt for renewal notices
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      # The file where ACME certificates are stored inside the container
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      # Enable Prometheus metrics
      - "--metrics.prometheus=true"
      # Configure Prometheus histogram buckets
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      # Check for newer Traefik versions and optionally log that info
      - "--global.checknewversion=true"
      # Disable sending anonymous usage data to the Traefik maintainers
      - "--global.sendanonymoususage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # A router to expose the Traefik dashboard
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      # Basic Authentication for the Traefik dashboard
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      # Specify the internal server port to the dashboard service
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      # Pass the original Host header to the backend
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
    restart: unless-stopped
